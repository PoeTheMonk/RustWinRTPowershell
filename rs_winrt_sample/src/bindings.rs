// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BasicTest(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BasicTest,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl BasicTest {
    pub fn Run(
        &self,
        value: &windows_core::HSTRING,
    ) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).Run)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn PropertyTest(&self) -> windows_core::Result<windows_core::HSTRING> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).PropertyTest)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| core::mem::transmute(result__))
        }
    }
    pub fn SetPropertyTest(&self, value: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPropertyTest)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(value),
            )
            .ok()
        }
    }
    pub fn CreateInstance(val: &windows_core::HSTRING) -> windows_core::Result<BasicTest> {
        Self::IBasicTestFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(val),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IBasicTestFactory<R, F: FnOnce(&IBasicTestFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<BasicTest, IBasicTestFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BasicTest {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBasicTest>();
}
unsafe impl windows_core::Interface for BasicTest {
    type Vtable = <IBasicTest as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBasicTest as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BasicTest {
    const NAME: &'static str = "rs_winrt_sample.BasicTest";
}
unsafe impl Send for BasicTest {}
unsafe impl Sync for BasicTest {}
#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BasicTestDatabase(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BasicTestDatabase,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl BasicTestDatabase {
    pub fn new() -> windows_core::Result<Self> {
        Self::IActivationFactory(|f| f.ActivateInstance::<Self>())
    }
    fn IActivationFactory<
        R,
        F: FnOnce(&windows_core::imp::IGenericFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BasicTestDatabase,
            windows_core::imp::IGenericFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
    pub fn GetCollection(&self, size: u32) -> windows_core::Result<windows_core::Array<BasicTest>> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::MaybeUninit::zeroed();
            (windows_core::Interface::vtable(this).GetCollection)(
                windows_core::Interface::as_raw(this),
                size,
                windows_core::Array::<BasicTest>::set_abi_len(core::mem::transmute(&mut result__)),
                result__.as_mut_ptr() as *mut _ as _,
            )
            .map(|| result__.assume_init())
        }
    }
    pub fn CreateInstance(val: bool) -> windows_core::Result<BasicTestDatabase> {
        Self::IBasicTestDatabaseFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                val,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IBasicTestDatabaseFactory<
        R,
        F: FnOnce(&IBasicTestDatabaseFactory) -> windows_core::Result<R>,
    >(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<
            BasicTestDatabase,
            IBasicTestDatabaseFactory,
        > = windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BasicTestDatabase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBasicTestDatabase>();
}
unsafe impl windows_core::Interface for BasicTestDatabase {
    type Vtable = <IBasicTestDatabase as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBasicTestDatabase as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BasicTestDatabase {
    const NAME: &'static str = "rs_winrt_sample.BasicTestDatabase";
}
unsafe impl Send for BasicTestDatabase {}
unsafe impl Sync for BasicTestDatabase {}
windows_core::imp::define_interface!(
    IBasicTest,
    IBasicTest_Vtbl,
    0x3e52906a_2f7b_52c2_95f3_04d7e00b79b2
);
impl windows_core::RuntimeType for IBasicTest {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBasicTest {
    const NAME: &'static str = "rs_winrt_sample.IBasicTest";
}
pub trait IBasicTest_Impl: windows_core::IUnknownImpl {
    fn Run(&self, value: &windows_core::HSTRING) -> windows_core::Result<windows_core::HSTRING>;
    fn PropertyTest(&self) -> windows_core::Result<windows_core::HSTRING>;
    fn SetPropertyTest(&self, value: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IBasicTest_Vtbl {
    pub const fn new<Identity: IBasicTest_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Run<Identity: IBasicTest_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBasicTest_Impl::Run(this, core::mem::transmute(&value)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn PropertyTest<Identity: IBasicTest_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBasicTest_Impl::PropertyTest(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn SetPropertyTest<
            Identity: IBasicTest_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            value: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBasicTest_Impl::SetPropertyTest(this, core::mem::transmute(&value)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBasicTest, OFFSET>(),
            Run: Run::<Identity, OFFSET>,
            PropertyTest: PropertyTest::<Identity, OFFSET>,
            SetPropertyTest: SetPropertyTest::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBasicTest as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicTest_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Run: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub PropertyTest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetPropertyTest: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBasicTestDatabase,
    IBasicTestDatabase_Vtbl,
    0xdfd5a1d0_ed6d_5329_939b_85ef6d228c9b
);
impl windows_core::RuntimeType for IBasicTestDatabase {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBasicTestDatabase {
    const NAME: &'static str = "rs_winrt_sample.IBasicTestDatabase";
}
pub trait IBasicTestDatabase_Impl: windows_core::IUnknownImpl {
    fn GetCollection(&self, size: u32) -> windows_core::Result<windows_core::Array<BasicTest>>;
}
impl IBasicTestDatabase_Vtbl {
    pub const fn new<Identity: IBasicTestDatabase_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn GetCollection<
            Identity: IBasicTestDatabase_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            size: u32,
            result_size__: *mut u32,
            result__: *mut *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBasicTestDatabase_Impl::GetCollection(this, size) {
                    Ok(ok__) => {
                        let (ok_data__, ok_data_len__) = ok__.into_abi();
                        result__.write(core::mem::transmute(ok_data__));
                        result_size__.write(ok_data_len__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBasicTestDatabase, OFFSET>(),
            GetCollection: GetCollection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBasicTestDatabase as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicTestDatabase_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub GetCollection: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut u32,
        *mut *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBasicTestDatabaseFactory,
    IBasicTestDatabaseFactory_Vtbl,
    0x385dc4f4_4510_5c67_8fa7_513c2cae4b02
);
impl windows_core::RuntimeType for IBasicTestDatabaseFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBasicTestDatabaseFactory {
    const NAME: &'static str = "rs_winrt_sample.IBasicTestDatabaseFactory";
}
pub trait IBasicTestDatabaseFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(&self, val: bool) -> windows_core::Result<BasicTestDatabase>;
}
impl IBasicTestDatabaseFactory_Vtbl {
    pub const fn new<Identity: IBasicTestDatabaseFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBasicTestDatabaseFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            val: bool,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBasicTestDatabaseFactory_Impl::CreateInstance(this, val) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<
                Identity,
                IBasicTestDatabaseFactory,
                OFFSET,
            >(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBasicTestDatabaseFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicTestDatabaseFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        bool,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBasicTestFactory,
    IBasicTestFactory_Vtbl,
    0x47f8fabf_be25_5c05_8c6f_9f902789329d
);
impl windows_core::RuntimeType for IBasicTestFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBasicTestFactory {
    const NAME: &'static str = "rs_winrt_sample.IBasicTestFactory";
}
pub trait IBasicTestFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(&self, val: &windows_core::HSTRING) -> windows_core::Result<BasicTest>;
}
impl IBasicTestFactory_Vtbl {
    pub const fn new<Identity: IBasicTestFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBasicTestFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            val: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBasicTestFactory_Impl::CreateInstance(this, core::mem::transmute(&val)) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBasicTestFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBasicTestFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBasicTestFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
